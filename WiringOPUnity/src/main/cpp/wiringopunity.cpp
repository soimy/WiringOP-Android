/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <string>
#include <wiringPi.h>
#include <softPwm.h>
#include <dlfcn.h>
#include <wiringPiSPI.c>
#include <wiringPiI2C.h>
#include <wiringSerial.h>
#include <cerrno>
#include <android/log.h>
/* Header for class com_sym_wiringopunity_wpiControl */

#define LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)
#define LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)
#define LOG_TAG "wpiControl"

#ifndef Included_wiringop_wpiControl
#define Included_wiringop_wpiControl

#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jint JNICALL
Java_com_sym_wiringopunity_wpiControl_wiringPiSetup(JNIEnv *env, jclass clazz) {
    LOGI("Entering wiringPiSetup");
    return wiringPiSetup();
}

extern "C"
JNIEXPORT void JNICALL
Java_com_sym_wiringopunity_wpiControl_pinMode(JNIEnv *env, jclass clazz, jint pin, jint mode) {
    return pinMode(pin, mode);
}

extern "C"
JNIEXPORT void JNICALL
Java_com_sym_wiringopunity_wpiControl_pullUpDnControl(JNIEnv *env, jclass clazz, jint pin,
                                                      jint pud) {
    return pullUpDnControl(pin, pud);
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_sym_wiringopunity_wpiControl_digitalRead(JNIEnv *env, jclass clazz, jint pin) {
    return digitalRead(pin);
}

extern "C"
JNIEXPORT void JNICALL
Java_com_sym_wiringopunity_wpiControl_digitalWrite(JNIEnv *env, jclass clazz, jint pin,
                                                   jint value) {
    return digitalWrite(pin, value);
}
extern "C"
JNIEXPORT jint JNICALL
Java_com_sym_wiringopunity_wpiControl_wiringPiSPIGetFd(JNIEnv *env, jclass clazz, jint channel) {
    return wiringPiSPIGetFd(channel);
}
extern "C"
JNIEXPORT jint JNICALL
Java_com_sym_wiringopunity_wpiControl_wiringPiSPIDataRW(JNIEnv *env, jclass clazz, jint channel,
                                                        jbyteArray data, jint len) {
    unsigned char *buf = NULL;
    int ret = -1;
    LOGI("Entering wiringPiSPIDataRW");
    buf = (unsigned char *) env->GetByteArrayElements(data, 0);
    ret = wiringPiSPIDataRW(channel, buf, len);
    env->ReleaseByteArrayElements(data, (jbyte *) buf, 1);
    return ret;
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_sym_wiringopunity_wpiControl_wiringPiSPISetupMode(JNIEnv *env, jclass clazz, jint channel,
                                                           jint port, jint speed, jint mode) {
    return wiringPiSPISetupMode(channel, port, speed, mode);
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_sym_wiringopunity_wpiControl_wiringPiSPISetup(JNIEnv *env, jclass clazz, jint channel,
                                                       jint speed) {
    return wiringPiSPISetup(channel, speed);
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_sym_wiringopunity_wpiControl_serialOpen(JNIEnv *env, jclass clazz, jstring dev,
                                                 jint baud) {
    const char *dev_utf = env->GetStringUTFChars(dev, 0);
    int fd = serialOpen(dev_utf, baud);
    if (fd < 0) LOGE("serialOpen failed: %s", strerror(errno));
    env->ReleaseStringUTFChars(dev, dev_utf);
    return fd;
}

extern "C"
JNIEXPORT void JNICALL
Java_com_sym_wiringopunity_wpiControl_serialClose(JNIEnv *env, jclass clazz, jint fd) {
    serialClose(fd);
}

extern "C"
JNIEXPORT void JNICALL
Java_com_sym_wiringopunity_wpiControl_serialFlush(JNIEnv *env, jclass clazz, jint fd) {
    serialFlush(fd);
}

extern "C"
JNIEXPORT void JNICALL
Java_com_sym_wiringopunity_wpiControl_serialPutchar(JNIEnv *env, jclass clazz, jint fd, jbyte c) {
    serialPutchar(fd, c);
}

extern "C"
JNIEXPORT void JNICALL
Java_com_sym_wiringopunity_wpiControl_serialPuts(JNIEnv *env, jclass clazz, jint fd, jstring s) {
    const char *s_utf = env->GetStringUTFChars(s, 0);
    serialPuts(fd, s_utf);
    env->ReleaseStringUTFChars(s, s_utf);
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_sym_wiringopunity_wpiControl_serialDataAvail(JNIEnv *env, jclass clazz, jint fd) {
    return serialDataAvail(fd);
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_sym_wiringopunity_wpiControl_serialGetchar(JNIEnv *env, jclass clazz, jint fd) {
    return serialGetchar(fd);
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_sym_wiringopunity_wpiControl_wiringPiI2CRead(JNIEnv *env, jclass clazz, jint fd) {
    return wiringPiI2CRead(fd);
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_sym_wiringopunity_wpiControl_wiringPiI2CReadReg8(JNIEnv *env, jclass clazz, jint fd,
                                                          jint reg) {
    return wiringPiI2CReadReg8(fd, reg);
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_sym_wiringopunity_wpiControl_wiringPiI2CReadReg16(JNIEnv *env, jclass clazz, jint fd,
                                                           jint reg) {
    return wiringPiI2CReadReg16(fd, reg);
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_sym_wiringopunity_wpiControl_wiringPiI2CWrite(JNIEnv *env, jclass clazz, jint fd,
                                                       jint data) {
    return wiringPiI2CWrite(fd, data);
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_sym_wiringopunity_wpiControl_wiringPiI2CWriteReg8(JNIEnv *env, jclass clazz, jint fd,
                                                           jint reg, jint value) {
    return wiringPiI2CWriteReg8(fd, reg, value);
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_sym_wiringopunity_wpiControl_wiringPiI2CWriteReg16(JNIEnv *env, jclass clazz, jint fd,
                                                            jint reg, jint value) {
    return wiringPiI2CWriteReg16(fd, reg, value);
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_sym_wiringopunity_wpiControl_wiringPiI2CSetup(JNIEnv *env, jclass clazz, jint dev_id) {
    return wiringPiI2CSetup(dev_id);
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_sym_wiringopunity_wpiControl_wiringPiI2CSetupInterface(JNIEnv *env, jclass clazz,
                                                                jstring device, jint dev_id) {
    const char *device_utf = env->GetStringUTFChars(device, 0);
    int fd = wiringPiI2CSetupInterface(device_utf, dev_id);
    if (fd < 0) LOGE("wiringPiI2CSetupInterface failed: %s", strerror(errno));
    env->ReleaseStringUTFChars(device, device_utf);
    return fd;
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_sym_wiringopunity_wpiControl_getGpioInfo(JNIEnv *env, jclass clazz, jintArray javaArrWpi,
                                                  jobjectArray javaArrPhysName) {
    g_info gpio_info;
    jint *physToWpi;
    jstring physNames;

    int ret = get_gpio_info(&gpio_info);
    if (ret < 0) {
        LOGE("get_gpio_info failed: %s", strerror(errno));
        return ret;
    }

    physToWpi = env->GetIntArrayElements(javaArrWpi, 0);
    int len = env->GetArrayLength(javaArrWpi);
    for (int i = 0; i < len; i++) {
        physToWpi[i] = gpio_info.physToWpi[i];
    }
    env->ReleaseIntArrayElements(javaArrWpi, physToWpi, 0);

    jsize stringArrayLen = env->GetArrayLength(javaArrPhysName);
    for (int i = 0; i < stringArrayLen; i++) {
        physNames = env->NewStringUTF(gpio_info.physNames[i]);
        env->SetObjectArrayElement(javaArrPhysName, i, physNames);
        env->DeleteLocalRef(physNames);
    }
    return gpio_info.pin_max;
}

#ifdef __cplusplus
}
#endif
#endif
